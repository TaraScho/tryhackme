# tactiq.io free youtube transcript
# TryHackMe Attacking and Defending AWS: IAM Credentials
# https://www.youtube.com/watch/2_F88G7I2Zw

00:00:00.080 hi everyone Tara here welcome back to my
00:00:02.560 channel this is going to be another try
00:00:04.400 hackme Room walkthrough of course I'm
00:00:06.040 getting up to about almost halfway
00:00:07.600 through the attacking and defending AWS
00:00:09.800 learning path I'm a huge AWS person if
00:00:11.759 you haven't seen some of the previous
00:00:13.040 videos so I love AWS I work in the field
00:00:15.759 of cloud security and I've been playing
00:00:17.160 through this learning path having a
00:00:18.680 really good time and learning some new
00:00:20.439 things as well so that's good of course
00:00:23.320 and this room is the I am credentials
00:00:25.920 room I actually just finished it and
00:00:27.439 then I'm recording this intro after
00:00:29.199 finishing it I thought was a good room
00:00:30.720 it talks about long-term AWS credentials
00:00:33.280 long-term access keys and short-term
00:00:34.879 session keys and helps you get really
00:00:36.840 familiar working with those so with that
00:00:38.920 little Preamble let's travel back in
00:00:40.920 time and uh I'll show you my walkthrough
00:00:42.920 of the
00:00:44.820 [Music]
00:00:52.160 room this is the I am credentials room
00:00:54.920 and the room description says learn how
00:00:56.800 I am handles credentials for
00:00:59.000 authentication to AWS apis so remember
00:01:02.120 anytime we do anything in AWS we're
00:01:03.879 really interacting with the AWS apis to
00:01:06.119 do actions task one says introduction to
00:01:09.119 IM
00:01:09.960 authentication every call to AWS is
00:01:12.520 authenticated in some form for the API
00:01:15.240 this is typically done through request
00:01:17.200 signing however when using the adabs
00:01:19.600 console you log in using a more
00:01:21.240 traditional username and password
00:01:22.799 combination in this room we will dive
00:01:24.640 into the various ways you authenticate
00:01:26.360 to abs and best practices for securing
00:01:29.240 your ads accounts and passwords so let's
00:01:32.520 just follow this link really quick looks
00:01:34.439 like this links to some ads
00:01:36.560 documentation about request signing what
00:01:38.880 request signing is how signatures are
00:01:41.280 formed in AWS and one of the interesting
00:01:44.200 parts of this documentation is uh the
00:01:46.600 why requests are signed section so this
00:01:49.280 is describing request signing has a few
00:01:51.640 different purposes it helps verify the
00:01:54.159 identity of the requester so
00:01:56.079 authenticated requests require a
00:01:57.640 signature that you create using your
00:01:59.439 credential and that helps verify that
00:02:01.960 you are who you say you are request
00:02:04.320 signing helps protect data in transit
00:02:06.600 because it helps to prevent with
00:02:08.239 somebody tampering with your request
00:02:09.919 while it's in transit it ensures data
00:02:12.560 Integrity essentially and then lastly a
00:02:15.160 request signing helps protect against
00:02:16.720 potential replay attacks so the request
00:02:19.440 has to reach AWS within five minutes of
00:02:21.840 the time stamp on the request and if
00:02:24.319 that request is older than 5 minutes AWS
00:02:26.760 will deny the request so that would stop
00:02:28.640 a bad actor from capturing your request
00:02:31.239 and then replaying it sending it to the
00:02:33.200 AWS API again if it's older than five
00:02:35.760 minutes the AWS API is just going to
00:02:37.800 deny the request and there's a lot of
00:02:39.239 other stuff here especially if you're
00:02:40.560 really into Cloud security but we'll go
00:02:42.239 back over to try hackme and this is a
00:02:44.840 task with no answer or no flag we just
00:02:46.840 say completed to say we read the
00:02:48.440 material and we can move on to task two
00:02:50.599 all right so task two is this same
00:02:53.319 accessing the environment task we've
00:02:55.560 seen before if you've watched any of the
00:02:57.000 other walkthroughs of this room or if
00:02:58.319 you're playing along so there's not
00:03:00.159 anything we need to do here we just need
00:03:02.200 to ensure that we know how to access the
00:03:04.440 adabs sandbox environment and if you
00:03:06.920 want to see me actually walk through how
00:03:09.720 this works the video where I really go
00:03:11.840 through all of this is the introduction
00:03:14.120 to I am Room video so you can see that
00:03:16.120 on my channel if you need more detailed
00:03:18.360 instructions of what's going on here but
00:03:20.239 for me I can scroll up and click Cloud
00:03:22.360 details here and I can see my
00:03:23.519 environment is still active from the
00:03:24.799 last time I was using it and my
00:03:26.360 environment is ready for playthrough for
00:03:28.400 all of these following rooms including
00:03:30.920 let's see this the room we are in is the
00:03:32.720 I am credentials room so we're ready to
00:03:34.560 go I'm just going to hit completed and
00:03:37.760 move on to task three task three is
00:03:40.080 called root password and let's see
00:03:42.840 what's going on here the first set of
00:03:44.560 credentials we will discuss is the most
00:03:46.400 powerful the login password for the root
00:03:48.400 account this is the password you create
00:03:50.519 when signing up as an AWS customer for
00:03:52.400 the first time there are very few limits
00:03:54.480 on what the root user can do so this
00:03:56.560 password should be secured protect at
00:03:58.319 all costs put it on the protect list at
00:04:00.000 all cost if your ads account was created
00:04:02.560 before 2017 this password is also your
00:04:04.959 Amazon retail password so be careful
00:04:07.239 when sharing your Amazon retail password
00:04:09.560 with family and friends although I'm
00:04:10.959 sure probably if you have an old account
00:04:12.519 like that you could change the password
00:04:14.040 I assume but I guess I don't know if you
00:04:16.000 use AWS organizations and create the AWS
00:04:18.560 account via the create account API call
00:04:21.000 then the root password is a randomly
00:04:22.639 generated string AWS doesn't return that
00:04:25.280 password when account when an account is
00:04:27.360 created via AWS organizations to log in
00:04:30.280 as root you will need to do a password
00:04:31.919 reset interesting I don't think I knew
00:04:33.400 that to log in as root or reset the
00:04:36.039 password you must use the main AWS
00:04:38.160 signin page and there's a link to the
00:04:40.000 AWS signin page which looks like what's
00:04:41.800 in these screenshots here to log in
00:04:45.520 there when you go to the sign-in page
00:04:47.240 you will be prompted to log in as an IM
00:04:49.560 user or a root user and again like I
00:04:51.280 said here's screenshots and I think it's
00:04:53.039 showing an example of how you could
00:04:54.800 reset the password if you have a new
00:04:56.639 account you created in your organization
00:04:58.120 you don't know the password all right
00:04:59.960 and then another easy one here so now
00:05:02.080 we're just certifying certify that you
00:05:04.080 are not a robot I'm not a robot that I
00:05:06.080 know of so I'm going hit completed and
00:05:09.080 cruising right through here now we are
00:05:10.639 on to task four task four is called I am
00:05:14.199 login profile the login profile is the
00:05:17.440 AWS term for a user's console password
00:05:20.360 not all I users have access to the AWS
00:05:22.919 console the AWS console uses the term
00:05:25.520 console password while AWS CLI and AWS
00:05:29.039 API are using the term login profile so
00:05:32.400 you could create IM users in your AWS
00:05:34.520 account that don't have a user password
00:05:36.440 to log to the guy to log into the
00:05:38.080 console but they could still have a
00:05:39.720 login profile that they could use to run
00:05:41.919 commands from the terminal or to do
00:05:43.919 things programmatically with the AWS API
00:05:47.080 to Grant an IM user access via the AWS
00:05:49.720 console you can do it from the user
00:05:51.319 security credentials tab or via the AWS
00:05:54.440 CLI and let's open this link to the
00:05:57.440 console and so here's our tryhackme I am
00:06:00.440 user in the tryhackme cloud sandbox and
00:06:03.960 here's uh security credentials here we
00:06:06.360 could enable console access so this
00:06:08.560 would give this user the username and
00:06:10.520 password to sign into the AWS console
00:06:12.840 and then here's where we manage the
00:06:14.080 programmatic access keys they can use
00:06:15.800 with the CLI or the API right now this
00:06:17.919 try hackme I am user looks like would
00:06:20.639 not be able to sign into the console uh
00:06:23.080 we would need to enable console access
00:06:24.960 for them
00:06:26.599 okay and here's the screenshot it
00:06:28.639 doesn't match exact what we saw I think
00:06:30.800 it's a little bit older but you get the
00:06:32.199 idea all right and then from the CLI we
00:06:35.759 can create a login profile using AWS IM
00:06:38.840 create login profile and then we can
00:06:40.880 send the user and an initial password as
00:06:43.000 arguments to create their login profile
00:06:45.840 and we can also use the command line to
00:06:47.599 change the user's password so we could
00:06:49.160 do AWS IM update login profile and we
00:06:51.680 could use that to update the user
00:06:53.280 password next AWS allows an account
00:06:56.759 administrator to set a rudimentary
00:06:58.720 password complex lexity policy and you
00:07:00.919 will find this setting in I am under
00:07:02.680 account settings or via the CLI with
00:07:05.599 this command AWS get account password
00:07:08.000 policy and we can see if we've created
00:07:10.199 some sort of password requirement so
00:07:12.160 let's go ahead and run that command here
00:07:14.560 is my local terminal that I like to be
00:07:16.360 stubborn and use but remember if you're
00:07:18.639 following along playing this room
00:07:20.240 yourself in tryhackme you could use the
00:07:21.919 tryhackme attack box or you could use
00:07:24.039 cloud shell and AWS to run these
00:07:25.800 commands but I like to do it locally for
00:07:28.000 the most part so we can do AWS IM get
00:07:31.759 account
00:07:33.960 password
00:07:38.440 policy and we can and I'm going to use
00:07:40.840 the profile flag uh to authenticate with
00:07:43.199 the CLI so let's see what we get
00:07:49.800 here all right so we've got this error
00:07:52.479 an error occurred no such entity when
00:07:54.599 calling the get account password policy
00:07:56.599 operation the password policy with uh
00:07:58.800 the domain name and this is the AWS
00:08:01.039 account number here cannot be found so
00:08:03.919 this would suggest no custom password
00:08:05.840 policy has been created in my try hackme
00:08:07.840 AWS account we're just using that
00:08:09.479 default AWS password policy when
00:08:12.159 passwords are being created for users
00:08:13.960 and I wonder if we can also see that
00:08:15.800 here in the console um so I think under
00:08:18.639 I am we can go to account settings and
00:08:22.240 we can see the password policy so that's
00:08:23.879 under I am account settings password
00:08:26.120 policy and we can see right here this
00:08:27.639 AWS account uses the following default
00:08:30.000 password policy so we haven't created
00:08:31.479 anything special but we could if we
00:08:33.000 wanted to all right and then here's the
00:08:34.760 screenshot kind of of the similar thing
00:08:37.039 so here's the question what is the
00:08:39.200 minimum number of numbers required in
00:08:42.799 the password policy okay the minimum
00:08:45.800 number of numbers and this is a
00:08:47.480 screenshot of the password policy the
00:08:50.040 default password policy and I think
00:08:52.480 doesn't it looks like the same as this
00:08:54.600 one in the
00:08:56.360 console so the password minimum length
00:08:59.399 is eight characters but we want to know
00:09:01.760 the minimum number of the minimum number
00:09:04.560 of numbers it's like a tongue twister
00:09:06.320 already so password strength include a
00:09:09.200 minimum of three of the following mix of
00:09:11.760 character types uppercase lowercase
00:09:14.920 numbers non-alpha numeric characters all
00:09:18.160 right so I'm going to try
00:09:21.079 three oh okay it's not three so what did
00:09:23.920 I miss here and let me I'll just make
00:09:26.440 sure and use I'll just use the
00:09:27.640 screenshot as well make sure I'm doing
00:09:28.920 this all right so this AWS account uses
00:09:32.040 the following default password policy
00:09:33.680 eight characters but that one mean eight
00:09:35.760 numbers include a minimum of three of
00:09:38.320 the oh I get it okay so include a
00:09:41.519 minimum of three of the following mix of
00:09:43.920 character types uppercase lowercase
00:09:45.640 numbers and um like punctuation I can't
00:09:48.079 think what the word for these is but
00:09:49.920 anyway all right so this is kind of like
00:09:52.240 tricky but I think the answer here is
00:09:54.839 zero well at least it tricked me maybe
00:09:57.200 it's not tricky for people who are
00:09:58.760 paying attention but anyway so include a
00:10:01.320 minimum of three of the following mix of
00:10:03.880 character types so we need a minimum of
00:10:06.079 three of three of these things so if we
00:10:08.519 had three uppercase letters three
00:10:11.399 lowercase letters and three symbols then
00:10:14.440 we could technically have zero numbers
00:10:16.920 so I bet the answer is zero all right
00:10:19.040 let's try
00:10:20.160 that okay they got me with that one all
00:10:23.000 right awesome so that is the answer for
00:10:25.519 test 4 and that's helping us just learn
00:10:27.880 about the default password policy and
00:10:29.600 also the functionality that we could
00:10:30.839 create our own complexity policy for
00:10:33.160 passwords for our IM users if we wanted
00:10:35.160 to and with that I'll move on to task
00:10:37.600 five task five is called AWS API access
00:10:41.800 key AWS access keys are the primary
00:10:44.720 method of interacting with the AWS API
00:10:47.360 and remember as we've kind of learned
00:10:48.639 about like through these rooms every
00:10:50.360 anytime we do anything in the cloud
00:10:51.760 anytime we do anything in the AWS we're
00:10:53.639 really just interacting with an API and
00:10:56.399 even the AWS console uses access keys on
00:10:59.160 the back end you'll be able to see this
00:11:00.959 when we dive into our room on cloud
00:11:02.399 trail cool there are two types of access
00:11:05.200 Keys long-term access keys and temporary
00:11:07.800 session Keys long-term access Keys begin
00:11:10.560 with the string a k i a they do not
00:11:13.360 expire but it's best practice to rotate
00:11:15.399 them regularly I would argue it's best
00:11:17.480 practice not to use long-term access
00:11:19.079 keys at all unless you absolutely can't
00:11:21.160 avoid it but yeah if you can't avoid
00:11:23.079 using the long-term access key then you
00:11:24.440 definitely want to be rotating it as
00:11:25.920 frequently as possible and then
00:11:28.320 long-term Keys consist of an access key
00:11:30.480 ID and a Seeker access key only IM users
00:11:33.800 or the root user can have long-term
00:11:35.880 access Keys however best practice is to
00:11:38.120 never generate access keys for the root
00:11:40.040 user the root user or an I am user can
00:11:42.839 have two access keys at one time so at
00:11:45.360 any given time an IM user could only
00:11:47.000 have two active access keys so just as
00:11:49.040 an example let's see we can come back to
00:11:51.240 our try hackme AWS sandbox here and if
00:11:53.800 we go to our I am users and we know the
00:11:56.839 try hackme I am user has access Keys CU
00:11:59.639 we saw those a minute ago so if we were
00:12:01.519 to scroll down this is one way you could
00:12:03.000 see how many access Keys your user has
00:12:05.240 and you can see there's two access Keys
00:12:07.560 here one of those keys is active and one
00:12:10.160 of those keys is inactive and we can see
00:12:12.320 here we don't have the option to create
00:12:14.040 another access key I don't know how well
00:12:16.199 you can tell in the recording but this
00:12:18.120 create access key button is faded out
00:12:20.480 and you cannot set the access key ID or
00:12:23.680 secret access key those values will
00:12:25.959 always just be generated by AWS you
00:12:27.959 can't use like a string that you want to
00:12:29.440 use all right and long-term access keys
00:12:32.079 can be active or inactive so we just saw
00:12:33.959 that example right so here's the active
00:12:35.560 key here's the inactive key you can
00:12:38.440 disable an AWS access key via this
00:12:41.079 command so we can do AWS IM update
00:12:43.959 access key we give the access key ID and
00:12:46.199 we can change the status to inactive and
00:12:48.399 that that would disable an active key
00:12:50.600 and then we could reenable the key if we
00:12:52.120 wanted using the same command but we'll
00:12:53.920 just send the status flag and then
00:12:55.639 active and we can also delete an access
00:12:58.040 key from the command line using ads IM
00:13:00.680 delete access key so one thing I could
00:13:03.600 think of here in the real world where
00:13:04.839 you might want to do this flow would be
00:13:06.839 all right let's say you're seeing some
00:13:08.600 sort of suspicious Behavior or something
00:13:10.279 and you think that an access key has
00:13:11.800 been compromised or leaked or somebody
00:13:13.880 has access to it that shouldn't and
00:13:15.320 they're doing something bad you can
00:13:17.120 immediately disable the access key you
00:13:19.079 can move the status to inactive and then
00:13:21.160 nobody will be able to use it to do
00:13:23.000 anything anymore in the environment and
00:13:25.360 you could very easily automate this
00:13:27.519 right like if um some threshold is
00:13:29.680 reached or something the key
00:13:30.880 automatically gets disabled but maybe
00:13:33.480 you don't want to go right to deleting
00:13:35.000 the key because you want to have it
00:13:37.279 there for the purpose of some sort of
00:13:38.920 Investigation or so you know auditing
00:13:40.519 purpose something like that anyway you
00:13:42.440 can keep it in a disabled State you can
00:13:44.279 reenable it if you need to and then when
00:13:46.079 you're sure you don't need it anymore
00:13:47.680 you can delete the access key and it's
00:13:49.160 good to understand these different
00:13:50.240 states that an access key can be in and
00:13:52.920 the other thing is I can't really think
00:13:54.040 of a situation in which you couldn't
00:13:55.839 just replace one long-term access key
00:13:58.360 with another other as long as it's
00:13:59.639 scoped to the same permissions and this
00:14:01.360 bits important to you once deleted a
00:14:03.199 long-term access key cannot be recreated
00:14:05.759 so once it's deleted it's gone that's
00:14:07.399 another reason it's good to maybe go to
00:14:09.360 that disabled State first make sure that
00:14:11.920 nothing has broken once you disabled the
00:14:14.040 key and then you can delete the key
00:14:16.480 session Keys have an expiration date
00:14:19.000 after which they are no longer valid
00:14:20.959 session Keys also have an access key ID
00:14:23.320 and a secret access key but they also
00:14:25.160 have a long session token so now that
00:14:27.079 we're talking about session keys we're
00:14:28.440 talking about temporary access Keys
00:14:30.880 short-term credentials and this is
00:14:32.399 definitely the preferable route to go
00:14:34.600 this is what I do in all my personal AWS
00:14:37.120 environments that I own I have a couple
00:14:38.560 videos about it on my channel if you're
00:14:40.279 interested in but I really try only to
00:14:41.839 use session Keys when I interact with
00:14:43.279 AWS because a lot of research around
00:14:45.199 Cloud security shows long-term access
00:14:47.519 keys are just like they're one of the
00:14:49.160 biggest problems they are the root cause
00:14:51.120 behind a lot of data breaches in the
00:14:52.920 cloud they're part of a lot of attack
00:14:54.399 paths if you can avoid the longterm
00:14:55.839 access keys I know this is like the
00:14:57.160 fifth time I've said it now so I
00:14:58.240 apologize but really avoiding long-term
00:15:00.839 access Keys is the way to go and it's
00:15:02.320 getting easier and easier to do that
00:15:03.880 because of session keys so session key
00:15:06.680 IDs we can differentiate a session key
00:15:08.959 from a long-term access key right away
00:15:10.680 because session key IDs begin with the
00:15:13.000 prefix Asia remember the Lo the
00:15:15.560 long-term access Keys use the aiaia
00:15:18.160 prefix and session uses
00:15:20.600 Asia and they're temporary ads session
00:15:23.279 keys they can't be deleted or disabled
00:15:25.680 like the long-term keys they simply just
00:15:27.279 expire at the end of their session
00:15:29.160 IM has many different identifiers which
00:15:31.519 are documented here okay cool so they by
00:15:33.680 identifier they are referencing like the
00:15:35.920 AKA and the as IIA that we just talked
00:15:39.160 about so you can scroll down and there
00:15:41.440 is a really nice table that helps you
00:15:44.440 understand all the different prefixes in
00:15:46.279 I am and this is definitely a great
00:15:48.720 resource to review so like we say Akia
00:15:51.800 when we see that we know we're dealing
00:15:53.079 with a long-term access key if we see an
00:15:56.120 ID that starts with a i da a we know
00:15:58.839 we're dealing with an i user so these
00:16:00.720 prefixes are really
00:16:02.160 useful all right and as always back to
00:16:04.639 what I'm supposed to be doing long-term
00:16:06.560 credentials can be created via the AWS
00:16:08.680 console or the AWS CLI so we can create
00:16:12.000 a access key using AWS IM create access
00:16:15.279 key and then we just Target a specific
00:16:17.480 IM user and shortterm keys are only
00:16:20.920 provided when requested and there are
00:16:22.959 numerous ways AWS can provide those they
00:16:25.519 are generated by the AWS security token
00:16:27.720 service which is abbreviated to STS the
00:16:30.480 most basic way to generate the
00:16:32.079 short-term Keys is AWS STS get session
00:16:35.759 token and I believe we're going to be
00:16:37.800 learning a lot more about this down the
00:16:39.519 road in this learning path as well all
00:16:41.480 right so how many active IM access keys
00:16:45.440 does the trackme user have well we just
00:16:48.120 saw that I think it was one right so
00:16:50.319 let's see so we are in our Tri hackme I
00:16:53.519 am user and and just in case we need to
00:16:55.839 like start over here so we could go to I
00:16:57.839 am the I am service in
00:17:01.000 AWS and we can go to users and then we
00:17:04.319 select our try hackme I am user and we
00:17:07.799 can scroll down oh excuse me and we can
00:17:09.359 go to security credentials and we can
00:17:11.760 scroll down and we will see that we have
00:17:14.559 the two access keys right here and one
00:17:16.720 of them is active like we said before
00:17:18.240 and one is inactive so therefore I think
00:17:21.480 this is less tricky than task four
00:17:23.199 hopefully unless I'm missing something
00:17:25.079 and I think the answer is
00:17:27.079 one okay whoop whoop so that was correct
00:17:29.960 for task five and now we'll move on to
00:17:32.960 task six task six is called MFA in AWS
00:17:37.400 and best practices around credentials
00:17:40.039 AWS supports using a virtual MFA and I
00:17:42.840 think this stands for like time limited
00:17:45.200 onetime password or something like that
00:17:47.480 top and hardware token or UTF security
00:17:51.280 key so you could use any of those three
00:17:52.880 things for MFA probably virtual MFA is
00:17:55.600 the most common Choice MFA can be
00:17:58.400 applied to either an IM user or the root
00:18:00.840 user when using an identity Federation
00:18:03.559 to assume an IM role implementing MFA is
00:18:06.640 the responsibility of the identity
00:18:08.440 provider so if you're federating into
00:18:10.360 AWS using some sort of identity from
00:18:12.400 somewhere else you would do the MFA part
00:18:14.520 when you are authenticating with the
00:18:16.039 external identity provider rather than
00:18:18.640 in AWS when MFA is applied to an IM user
00:18:22.200 or the root user AWS will require the
00:18:24.760 second Factor when performing a console
00:18:27.120 login MF is not required by default when
00:18:30.520 making an AWS API call using access Keys
00:18:33.960 however IM policies can Implement
00:18:35.799 conditions remember we saw this before
00:18:37.200 if you saw the other permissions room
00:18:39.240 where we were using the conditions Block
00:18:40.960 in IM policies you can Implement
00:18:43.280 conditions in your IM policies that
00:18:45.320 require MFA for certain uh actions to do
00:18:49.240 this the user must first request
00:18:50.600 temporary credentials and pass the MFA
00:18:52.799 token as part of the request the new
00:18:55.039 temporary credentials will have a flag
00:18:56.720 that says MFA was present when they were
00:18:59.000 created and the IM policy condition will
00:19:01.240 then be satisfied and the action will be
00:19:03.159 allowed mishandling of AWS credentials
00:19:05.880 is the primary way an AWS account is
00:19:08.280 compromised there are several best
00:19:10.240 practices for handling AWS access keys
00:19:12.960 that you should follow avoid using IM
00:19:15.960 users whenever possible sing it from the
00:19:18.320 rooftops this is like so true if you can
00:19:20.120 do this this is really good step in the
00:19:21.720 right direction avoid using IM users
00:19:23.840 whenever possible many Cloud providers
00:19:26.000 offer the ability to use samle or o DC
00:19:28.720 to get session credentials for AWS API
00:19:31.640 access session credentials are just so
00:19:33.480 much better because of the time limited
00:19:35.400 aspect rather than long-term access Keys
00:19:37.760 attached to an IM user never commit an
00:19:41.880 access key to a source code repository
00:19:43.840 such as GitHub or gitlab GitHub will
00:19:46.919 scan all commits to public repositories
00:19:49.080 for any of the Akia prefix that denotes
00:19:53.000 a long-term access key and if GitHub
00:19:55.400 finds that GitHub notifies AWS and AWS
00:19:58.799 will promptly disable that key for you
00:20:01.080 but even committing access keys to a
00:20:03.200 private repository is very bad because
00:20:05.600 that repository could be compromised and
00:20:07.840 attackers will look right away for uh
00:20:10.520 Akia in the source code or in
00:20:12.600 configuration files and this is like a
00:20:14.760 problem a risk easily mitigated by
00:20:16.720 automation even like the savviest AWS
00:20:19.520 security people I know everyone can be
00:20:21.640 guilty every once in a while of
00:20:23.159 accidentally committing something they
00:20:24.720 shouldn't so get automated scanning um
00:20:27.559 somehow in your cicd process even for
00:20:29.600 like personal projects and stuff make
00:20:31.320 sure you are somehow checking
00:20:33.280 programmatically for Access keys in your
00:20:35.559 commits it will save you a lot of
00:20:37.039 Heartache down the road and maybe I'll
00:20:38.799 make a video about how I do this in my
00:20:40.520 own personal repositories and post it to
00:20:42.400 the channel so if I ever do that I'll
00:20:44.320 update the description below to link
00:20:45.799 this but let's see how industrious I get
00:20:48.520 anyway um the third best practice here
00:20:51.559 rotate access Keys often so yeah if you
00:20:54.120 have to use access Keys make sure and
00:20:55.640 rotate them when you create the access
00:20:57.880 key you have the option to download the
00:21:00.440 credentials as a CSV file these CSV
00:21:03.240 files collect in your downloads folders
00:21:05.400 and if you don't properly clean those
00:21:07.559 files uh you know if you just leave them
00:21:10.200 sitting in your downloads file that's a
00:21:12.360 risk where they could get compromised
00:21:14.240 from there from the downloads folder in
00:21:16.000 your local machine they use like an
00:21:18.559 example here of if the laptop is left in
00:21:21.159 a taxi cab the credentials could find
00:21:23.760 themselves for sale on the dark web so
00:21:25.760 yeah just you don't want to leave those
00:21:27.000 CSV files lying around and then lastly
00:21:30.080 use multiactor authentication for access
00:21:32.760 to the root and IM users use multiactor
00:21:35.200 authentication everywhere you can use it
00:21:38.120 many of the IM identifiers can be useful
00:21:40.440 from a reconnaissance perspective for
00:21:42.640 example we know to look for AK a strings
00:21:45.799 and while they are not sensitive they
00:21:47.840 can be used to identify an AWS account
00:21:50.520 with the following command Okay cool so
00:21:52.840 let's try this command with the access
00:21:55.760 key in this try hackme account and let's
00:21:59.000 uh see a demonstration of this so AWS
00:22:02.200 STS get access key was it info get
00:22:06.960 access key info and then we can why am I
00:22:09.880 not just copying and pasting this all
00:22:12.000 right
00:22:14.400 so silly
00:22:17.400 me um and then so we send the access key
00:22:20.840 ID we can get that from here so you can
00:22:23.520 see they both start with a k i a let's
00:22:26.880 get the one that's add
00:22:35.279 and and then this is just to be
00:22:37.559 authenticated with the
00:22:39.080 CLI let's see what we
00:22:44.080 get okay so we can send the access key
00:22:47.880 ID and it Returns the AWS account ID
00:22:50.880 where that access key is so you can see
00:22:52.559 why that might be helpful for
00:22:54.320 reconnaissance on an account okay so
00:22:56.200 we've got two questions here first is
00:22:58.080 which user has an MFA attached to it so
00:23:01.480 MFA being multiactor authentication so
00:23:04.919 to answer that I'm sure we could do it
00:23:06.520 with the command line we can also just
00:23:08.679 go over to the AWS console and let me
00:23:12.320 I'm going to go back to the console home
00:23:13.640 just so we can see like from the
00:23:15.279 beginning how we would go about doing
00:23:16.760 this so first we can navigate to the I
00:23:19.159 service so we can click right here
00:23:20.799 because we have been using it all day or
00:23:22.520 we can just search up here for I am and
00:23:25.360 then let's see we can scroll down and we
00:23:27.559 want to find our I think it was the try
00:23:31.159 oh we want to figure out which user has
00:23:33.080 MFA all right so we've got two users
00:23:35.640 here and I think we can actually even
00:23:38.320 tell just right from this list right so
00:23:39.880 we've got MFA right here and we can see
00:23:43.400 that the triy hackme I am user is the
00:23:45.039 one that has MFA we could also see this
00:23:47.640 by clicking into the user and then we
00:23:49.600 can go to security credentials and you
00:23:51.279 can scroll down here to see the
00:23:53.320 multiactor authentication configuration
00:23:56.039 and update it so for our user that
00:23:58.600 doesn't have MFA for example which is
00:24:01.159 this user uh the console access enabled
00:24:03.679 without MFA gives us like a nice warning
00:24:05.760 right there and then under security
00:24:07.679 credentials for them we can see they
00:24:09.520 don't have MFA and here's where we could
00:24:11.440 set it up all right so anyway let's see
00:24:14.440 so all that random like blabbing to say
00:24:17.960 what was the name the name was try
00:24:19.640 hackme I am user let's try
00:24:23.880 that okay whoop whoop so that was the
00:24:26.320 first question and another way we could
00:24:28.840 have answered this so I know which user
00:24:32.200 I am when I log into my try hackme
00:24:34.200 sandbox and we know there are only two
00:24:36.760 users in the account currently in this
00:24:38.520 module that we're in so I know that this
00:24:40.760 user does not have MFA applied because
00:24:43.559 when I log in to the console as that
00:24:45.799 user I don't have to use MFA to do it so
00:24:48.159 that's another way we could have
00:24:49.200 answered that question all right and
00:24:51.320 then the next question is what account
00:24:53.000 ID does this Akia a key belong to so we
00:24:57.360 just press practiced doing that actually
00:24:59.000 so we can do it again let's um run the
00:25:02.600 same command however we'll use this
00:25:05.600 access key ID
00:25:11.039 instead all
00:25:14.279 right I'm going to laugh so hard if
00:25:16.240 that's the exact same access key ID but
00:25:18.840 it's okay so let's see what account this
00:25:21.840 access key belongs
00:25:26.159 to all right and this belongs to this
00:25:28.960 account and I think we've seen this
00:25:30.559 account number before so let's give that
00:25:33.399 a
00:25:34.279 try and there we go so that is Task six
00:25:37.919 and we are almost done with this room
00:25:39.559 just one task to
00:25:40.960 go task seven is called how Services get
00:25:45.000 credentials as we noted in the section
00:25:47.279 on I am roles AWS Services can also
00:25:49.919 leverage temporary credentials to access
00:25:52.039 resources in your account the roles
00:25:54.240 assume rooll trust document must specify
00:25:56.720 the service as a principle allowed to
00:25:59.520 assume the role and I think we've seen
00:26:01.080 examples of this before for example I'm
00:26:02.679 remembering we looked at one trust
00:26:04.520 policy that I think had the events
00:26:05.960 Service as a principal allowed to assume
00:26:08.279 the role The Mechanics for getting those
00:26:11.080 credentials vary depending on the
00:26:12.960 service but when you're attacking or
00:26:14.960 defending Cloud infrastructure knowing
00:26:16.840 how to get these credentials is vital
00:26:19.640 the primary way to get credentials for a
00:26:21.640 role is with the AWS STS assume role API
00:26:25.520 call or AWS STS Ru AWS CLI command if
00:26:30.399 you're using an ec2 instance there is a
00:26:32.440 special Network address in the
00:26:34.120 hypervisor you can use to request
00:26:36.360 temporary credentials for the ec2
00:26:38.320 instance profile it was through this
00:26:40.399 instance metadata service imds that the
00:26:43.000 capital 1 breach was executed we talked
00:26:45.039 about this in one of the earlier rooms I
00:26:47.039 want to see maybe like basic concepts uh
00:26:49.399 instance metadata service and how imds
00:26:53.720 was an was part of the attack path for
00:26:56.399 the famous Capital 1 breach
00:26:58.159 and you always want to make sure you are
00:26:59.720 using imds version 2 in EC 2 imds
00:27:03.399 version one is not good it's vulnerable
00:27:06.039 in a future room we're going to show oh
00:27:08.399 okay in a future room we're going to
00:27:09.640 practice using imds so we're going to do
00:27:11.480 a curl to the imds address and it'll
00:27:14.320 give us back temporary AWS access
00:27:17.240 Keys oh I'm always jumping the gun okay
00:27:20.000 I apologies as a response to the Capital
00:27:22.600 One incident and outcry from the cloud
00:27:25.120 security Community AWS released the idms
00:27:29.039 version
00:27:29.919 2 I think there I think this is a little
00:27:32.360 error there so I think they mean IM DS
00:27:36.360 now I'm confused because it's instance
00:27:37.960 metad dat service so I think this is
00:27:39.799 just flipped right here so it should be
00:27:41.360 imds version to let me double check if
00:27:43.799 that's right yeah Okay so we've been
00:27:46.159 saying it right the whole time
00:27:48.039 imds imds version two which requires a
00:27:51.200 twostep session based
00:27:53.840 method so just to say that again CU that
00:27:56.559 those two letters is being swapped
00:27:57.960 through me off as a response to the
00:28:00.159 Capital One incident and outcry from the
00:28:02.000 cloud security Community AWS released
00:28:04.440 the IM MDS version 2 which requires a
00:28:07.960 two-step session based method which is
00:28:09.880 better and addresses that vulnerability
00:28:12.200 in imds the first version that was
00:28:14.240 wreaking havoc if your code is running
00:28:16.360 in adabs Lambda which is the serverless
00:28:18.600 compute service the access key ID secret
00:28:21.519 access key and session token are
00:28:23.200 available as environment variables in
00:28:25.080 your Lambda environment for EC
00:28:27.720 containers ECS is a elastic container
00:28:30.399 service there is another IP address you
00:28:32.799 can curl for the containers credentials
00:28:35.600 and hopefully I wonder if we're going to
00:28:37.039 practice using this later but we can
00:28:38.600 curl this address and the AWS container
00:28:40.600 credentials relative URI environment
00:28:42.399 variable will be populated if the IM
00:28:45.039 rule for the task is configured if
00:28:47.159 you've never used ECS just know from
00:28:48.919 within your container you could curl
00:28:50.240 this address and it would return
00:28:51.840 credentials finally you can get
00:28:54.159 temporary credentials from your Cloud
00:28:55.840 cell with this simple command all right
00:28:57.840 so let's actually open cloudshell we
00:28:59.440 haven't done that yet and let's see
00:29:01.360 what's going on in cloudshell which is
00:29:03.600 the browser based terminal where you can
00:29:05.600 run commands with the CLI and probably
00:29:07.399 what I should have been doing all along
00:29:09.279 rather than being stubborn and setting
00:29:10.720 up my local profile but what can I say I
00:29:12.840 am who I am all right so let's try using
00:29:15.200 this command so from within
00:29:18.279 cloudshell can run this command and
00:29:20.640 let's see if it returns credentials okay
00:29:22.880 indeed so we can see this is returning
00:29:24.880 access key ID secret access key and I'm
00:29:27.960 going to blur these out even though I
00:29:29.279 can see these are temporary credentials
00:29:30.919 because they have an expiration but who
00:29:32.760 knows maybe I'll actually be really fast
00:29:34.360 editing this video and you'll have time
00:29:35.640 to hack me because they don't expire
00:29:37.559 until tomorrow so who knows what I'll
00:29:39.080 get up to but anyway use the cloud shell
00:29:42.240 and curl command above to download the
00:29:43.919 temporary credentials what is the Json
00:29:45.640 key that begins with e all right so
00:29:48.440 that's the expiration key if you're not
00:29:50.360 familiar with Json in Json there's keys
00:29:52.679 and values so this is a key the
00:29:54.519 expiration is a key and then the time it
00:29:56.760 expires is a value so they're asking the
00:29:59.120 key that starts with e which is
00:30:01.200 expiration and then when using temporary
00:30:03.559 credentials what are the first four
00:30:05.000 letters of the access key ID so when
00:30:07.440 using temporary credentials I believe
00:30:08.840 that was as I a as opposed to AK I a
00:30:13.799 which I said so many times like a tongue
00:30:16.440 twister all right awesome so that was
00:30:18.720 our IM credentials room I thought that
00:30:20.200 was another good one and I'm going to
00:30:22.720 take a break grab a drink and then I'm
00:30:24.679 going to go on and play the next room
00:30:26.559 which is the quest release privilege so
00:30:28.039 maybe I'll see you there and thank you
00:30:29.480 for
00:30:34.720 watching
