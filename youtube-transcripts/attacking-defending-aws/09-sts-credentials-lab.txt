# tactiq.io free youtube transcript
# TryHackMe Attacking and Defending AWS: STS Credentials Lab
# https://www.youtube.com/watch/_43dHKdS2no

00:00:00.080 hi everyone it's Tara welcome to the
00:00:02.280 channel in this video I'm going to do
00:00:04.480 another try hackme walk through and
00:00:06.480 continue playing through the attacking
00:00:08.719 and defending AWS learning path on
00:00:11.040 tryhackme that I have been making some
00:00:13.080 video walkthroughs of just for fun and
00:00:15.480 I'm big AWS nerd if you watch some of
00:00:17.800 the other videos probably know that and
00:00:19.640 really enjoying this AWS learning path
00:00:21.840 that try hackme put together so this
00:00:24.920 video focuses on the STS credentials lab
00:00:28.039 which STS stands for security token
00:00:30.080 service it's a service of AWS and I
00:00:32.840 actually just finished playing through
00:00:34.480 the STS lab and then came back to make
00:00:36.640 this video and this was probably my
00:00:38.200 favorite uh activity room so far on the
00:00:41.079 AWS learning path it's all about STS uh
00:00:44.160 assuming roles we learn about long-term
00:00:45.960 credentials short-term credentials and I
00:00:47.840 thought it was very realistic and
00:00:49.160 relevant to some different use cases and
00:00:51.640 topics that you do hear about a lot in
00:00:54.000 the world of cloud security this room is
00:00:56.960 also the last room in the I am module on
00:00:59.559 the attack and defending ads path so
00:01:01.680 this wraps up IM and applies some of the
00:01:04.159 knowledge that we have learned about in
00:01:05.560 the other IM rooms with that all said
00:01:08.920 this is my video walkthrough of the STS
00:01:11.479 credentials lab and I hope you enjoy
00:01:14.470 [Music]
00:01:21.840 it so here we have the STS credentials
00:01:25.520 lab and the description says learn how
00:01:27.680 to assume roles and get temporary
00:01:30.000 credentials and I decided I'm finally
00:01:32.000 going to give in and use the try hackme
00:01:35.040 attack box instead of my local terminal
00:01:37.479 for uh running AWS commands because I
00:01:40.880 realized I could have this nice split
00:01:42.720 screen it'll look a lot nicer for
00:01:44.079 sharing my screen in this video so these
00:01:46.360 are the sacrifices I make I'm going to
00:01:47.880 get the attack box started to run
00:01:49.040 commands in AWS and task one is called
00:01:52.479 an introduction to STS credentials but I
00:01:55.759 guess until I need this I think I can
00:01:57.200 make this smaller right how do I hide it
00:02:01.920 all right task one is called
00:02:03.880 introduction to SCS credentials
00:02:06.280 understanding how credentials are
00:02:07.320 generated and can be leveraged is
00:02:09.440 critical for understanding how to attack
00:02:11.239 or defend a cloud account or application
00:02:14.040 in this room we will walk through the
00:02:15.800 creation of a new IM user and an IM
00:02:17.879 access key for that user we will then
00:02:19.959 use that key to assume a different IM
00:02:22.360 role to get temporary credentials you
00:02:24.400 can refer back to the AWS API access key
00:02:27.519 and how Services get credentials tasked
00:02:29.640 in the IM am credentials room to refresh
00:02:31.800 if we need to and I do have a video walk
00:02:33.959 through of that room if you want to go
00:02:35.120 back and look at those tasks in the
00:02:38.519 above diagram the I IM group and the I
00:02:42.120 am policy that has the actual
00:02:43.560 permissions and the role already exist
00:02:46.159 okay so in this diagram I try to make it
00:02:47.840 bigger it goes into this weird like dark
00:02:50.239 mode but the text color doesn't adjust
00:02:52.120 so okay I'll give up and stop doing that
00:02:54.000 but so it says in the above diagram the
00:02:55.920 I am group I am policy which has the
00:02:58.280 permissions the policy contains the IM
00:03:00.040 permissions and the role already exists
00:03:02.599 so that would be the IM group and it has
00:03:05.040 this permissions policy attached to it
00:03:06.560 that's already there apparently and then
00:03:08.480 this role already exists in our adabs
00:03:10.920 sandbox as well we are going to create
00:03:13.319 the I user and long-term security
00:03:16.239 credential so that will I imagine be an
00:03:18.120 access key we're going to create for
00:03:19.480 this user from the attack box we will
00:03:22.239 use the long-term credential to
00:03:23.840 authenticate to STS the security token
00:03:26.360 service to assume the role and then STS
00:03:29.760 when we assume the role is going to
00:03:31.519 return session credentials so those are
00:03:33.239 the temporary credentials and just side
00:03:35.080 note you might remember if you played
00:03:36.040 through the IM credentials room these
00:03:37.920 short-term credentials will start with
00:03:39.599 Asia and these long-term credentials
00:03:41.680 will start with k so that's a quick way
00:03:44.560 when we're looking at them to remember
00:03:46.360 so our user is going to use the
00:03:48.439 long-term access key to authenticate to
00:03:51.040 STS and then assume the role via SCS and
00:03:54.480 then SCS is going to return those
00:03:55.920 temporary security credentials needed to
00:03:58.000 authenticate to the role all right right
00:04:00.079 or authenticate as that rle says if you
00:04:02.879 haven't already done so click the orange
00:04:04.799 Cloud details button at the top right of
00:04:06.439 the page to generate the environment and
00:04:08.760 use the credentials provided to access
00:04:11.319 our AWS sandbox all right so I do think
00:04:13.319 we maybe need to generate new
00:04:15.879 infrastructure for this room because I
00:04:17.160 don't see STS lab here so let oh yep and
00:04:20.399 and we know we need new stuff for our
00:04:22.639 ads environment because this green
00:04:24.639 button is here so we're going to
00:04:26.600 generate the environment so that it can
00:04:28.120 spin up the role group and the policy
00:04:30.639 for me and I'll just point out here also
00:04:32.440 so it looks like the I user itself does
00:04:35.360 not have a policy attached to it but it
00:04:37.840 will still inherit permissions from the
00:04:39.840 IM policy that is attached to the group
00:04:42.000 if it's going to be a member of the
00:04:42.960 group so these uh permissions will be
00:04:46.280 applied all right and then it also says
00:04:48.199 for this room make sure to start the
00:04:49.960 attack box and prepare the AWS Cloud
00:04:52.039 shell in your AWS sandbox account we
00:04:54.440 will create a user in the cloud cell
00:04:56.560 then simulate the exfiltrated or on-prem
00:04:58.720 usage of the credential on the attack
00:05:00.320 box Okay cool so we're going to use
00:05:01.960 cloud shell as well to actually create
00:05:04.120 our user so I already logged into the
00:05:07.160 Ada sandbox for trip hackme and I'm just
00:05:09.440 going to go to cloudshell you can just
00:05:11.400 search right here Cloud shell which is
00:05:13.160 the browser based shell that already all
00:05:15.560 set up for the CLI for us so here we are
00:05:18.680 welcome to ads Cloud shell and I think
00:05:20.479 I'm getting this permissions error
00:05:21.680 because my environment is still
00:05:22.840 currently generating so I don't have the
00:05:24.800 right permissions to use this yet but
00:05:26.039 I'll refresh as soon as uh the
00:05:27.680 environment's done all right so that
00:05:29.720 task one we just hit completed say we
00:05:31.400 are ready we know what's in store for us
00:05:33.840 and then we can move on to task two
00:05:36.120 which is the accessing the environment
00:05:38.520 task so we already just did that this is
00:05:41.319 about how we make sure our environment
00:05:42.759 is working correctly and we've seen this
00:05:44.800 a few times now if you watch any of the
00:05:46.319 other AWS videos but basically you walk
00:05:49.039 through these steps and use this
00:05:50.440 generate environment functionality I'm
00:05:51.919 just going to hit
00:05:54.280 completed whoop whoop and that brings us
00:05:56.440 to test three where we're actually going
00:05:57.639 to get started doing some things in the
00:05:59.319 class and our Cloud environment is ready
00:06:01.880 it has loaded so our sandbox is ready
00:06:04.319 with what we need and we can move on to
00:06:06.479 task three task three is called create
00:06:08.919 the Padawan user so I think these are
00:06:11.479 Star Wars references right I always say
00:06:13.000 that like people probably think I'm
00:06:14.800 joking in these videos because I always
00:06:16.319 say that but I'm really never confident
00:06:19.039 that something I'm seeing is a Star Wars
00:06:20.479 reference until I see the font or other
00:06:22.680 confirmation so I think Padawan is Star
00:06:25.280 Wars but that will be embarrassing if
00:06:26.599 I'm wrong and we're going to start by
00:06:28.800 creating the user Padawan IM users are
00:06:31.680 the easiest way to Grant access to a
00:06:33.840 system outside of your Cloud environment
00:06:36.280 so we're going to do this in Cloud show
00:06:37.639 so earlier when I was talking about
00:06:38.759 starting up the attack box I thought I
00:06:40.240 was going to use the attack box to run
00:06:42.199 my AWS CLI commands but that was wrong I
00:06:44.479 think I'm going to use the attack box to
00:06:46.800 exploit the IM credentials after we've
00:06:49.240 created them so the attack box is going
00:06:50.800 to be the attacker the bad actor and
00:06:52.800 it's going to be cloudshell that is
00:06:54.400 actually authenticated to the ads CLI
00:06:56.879 for our try me account okay Okay so
00:06:59.680 we've got try hackme on the left we've
00:07:01.280 have Cloud cell on the right signed into
00:07:03.479 the try hackme ads account I refreshed
00:07:06.080 the page now that my stuff has all
00:07:08.479 generated so I am in for cloud and we
00:07:11.080 are going to create the padan user so we
00:07:13.280 are going to do that by running some ads
00:07:15.720 command so we're going to do ads IM
00:07:18.160 create user and the username is going to
00:07:22.720 be
00:07:26.199 Padawan and we see this output so that
00:07:29.080 means we successfully created our user
00:07:31.199 and remember we learned about those I am
00:07:32.800 prefixes before so we know the I prefix
00:07:35.479 here a i da a we see that we would know
00:07:39.120 if we were to see that ID without the
00:07:40.680 user ID key we would still know that's
00:07:43.240 an user all right now we are going to
00:07:47.000 Grant Padawan some permissions by adding
00:07:49.280 them to the Padawan group and the group
00:07:51.080 already exists in our account we could
00:07:53.240 probably even see it right here if we
00:07:55.479 want just to really like dive deep into
00:07:58.159 what's going on I'm such a dork when
00:07:59.319 whenever I search for the IM service in
00:08:00.720 AWS I always type AWS in front of it I
00:08:02.840 don't know why I do that it's such a
00:08:04.159 habit just for I I guess maybe because
00:08:06.520 you find yourself referencing like gcp I
00:08:08.800 am often or just the concept of I am in
00:08:10.960 general maybe that's why I always think
00:08:13.479 I need to delineate AWS I am anyway what
00:08:16.759 were we doing okay so here are the user
00:08:18.479 groups that exist in our try hackme
00:08:20.240 account already so we have Padawan group
00:08:23.080 and the STS rooms group and I think
00:08:25.479 we're going to add Padawan to this
00:08:27.879 existing group grou that was already
00:08:31.479 created for us and here are the
00:08:33.839 permissions that are attached to that
00:08:35.919 group The assume Jedi rooll so when we
00:08:38.719 add Padawan to this group Padawan is
00:08:41.000 going to have these permissions as well
00:08:43.479 okay so let's do a copy and paste we can
00:08:46.279 do AWS IM add user to the group and
00:08:49.320 we're going to add Padawan to Pan's
00:08:53.040 group all right and now that we have
00:08:55.839 created the user identity we're going to
00:08:57.720 create the access keys that we're going
00:08:59.440 to use on the attack box in the next
00:09:01.079 task so we're going to save the output
00:09:03.399 of the create user command so that we
00:09:05.360 can validate the identity in a user task
00:09:08.440 so we're going
00:09:09.480 to uh save the output of this command
00:09:13.279 and I don't know I'm not necessarily
00:09:14.920 sure they mean save it into a variable
00:09:18.440 but we could do that let's just do that
00:09:19.920 so let's do AWS I am list groups for
00:09:24.720 user tac tac username Padawan and then
00:09:29.720 we can um save the output to let's just
00:09:32.079 do output. text let's just do a really
00:09:35.120 descriptive name that will be easy to
00:09:37.839 remember and then we can do cat
00:09:41.000 output.txt
00:09:42.920 so this was the output and we've got it
00:09:45.320 saved here so we can reference it again
00:09:47.560 what are the first four letters of the
00:09:49.120 group ID of Padawan group and remember
00:09:51.399 we don't even actually need this output
00:09:52.920 to answer this question if we just
00:09:54.519 remember what the I am prefix for groups
00:09:56.800 are and I think it's AGI I a oh no
00:10:00.800 agpa okay so we did need to run that
00:10:03.480 command in that case but in general the
00:10:05.079 idea is this prefix is the same for
00:10:06.920 every group
00:10:08.000 agpa for every I IM group ID so that is
00:10:11.760 Task three and now on to task four where
00:10:15.079 we are going to create Padawan access
00:10:18.040 key having created the identity and
00:10:20.680 granted permissions by adding the user
00:10:22.600 to the group you have configured
00:10:24.360 authorization for this user and
00:10:26.079 authorization is what you are able to do
00:10:28.560 what your authorized to do in the domain
00:10:31.120 in this task we configure the ability to
00:10:33.720 authenticate to the ads apis and the
00:10:35.959 authenticate is who you are so to access
00:10:39.360 the Padawan user on the attack box you
00:10:41.959 will need to generate an access key like
00:10:43.720 so this is the same as um like what
00:10:45.800 we've seen before where we go to a user
00:10:48.800 in I am and we go to security
00:10:52.160 credentials and we scroll down and we
00:10:53.720 create an access key here this command
00:10:56.160 is doing the same thing so let's run
00:10:59.639 databas I am create access
00:11:03.920 key
00:11:05.680 username padan sometimes I just like to
00:11:08.720 type these out I don't know I find it
00:11:09.839 like relaxing so let's do that and now
00:11:13.480 Padawan has an access key note this is a
00:11:15.560 long-term access key with the AK a
00:11:18.800 prefix and there's no expiration because
00:11:21.200 it's not a short-term credential so we
00:11:24.120 could come over here and do a
00:11:27.720 refresh and
00:11:29.880 and now Padawan has access key so now we
00:11:34.360 need to start the attack box back up to
00:11:37.000 start our attack so I'm going to uh
00:11:40.399 minimize my cloud shell and my AWS and
00:11:43.160 I'm going to show the split view for the
00:11:45.079 attack
00:11:46.279 box all right very nice I love this
00:11:49.800 beautiful gradient so much it brings me
00:11:51.680 joy every time I see it okay so we're
00:11:54.320 going to go to the attack box and issue
00:11:55.920 these two commands so we're going to set
00:11:59.000 set the uh environment variables here
00:12:01.240 for AWS secret access key and AWS access
00:12:04.360 key ID using these environment variables
00:12:06.680 is another way to authenticate with the
00:12:08.200 CLI and there's something called um I'm
00:12:10.839 forgetting like the exact name but
00:12:12.440 there's the idea of authentication uh
00:12:15.040 precedence so the CLI when it's trying
00:12:17.519 to authenticate you to run a command
00:12:18.959 will go through a certain order of where
00:12:20.639 it tries to find credentials and figure
00:12:22.760 out who you are so I think we could even
00:12:25.160 probably look it up so let's do like
00:12:27.880 prent
00:12:29.519 I don't know how you spell precedence
00:12:31.160 AWS CLI authentication so okay so
00:12:35.240 apparently I have looked this up before
00:12:37.000 let's see if this is the right
00:12:38.480 one yeah okay credential precedence
00:12:41.720 credentials and configuration settings
00:12:43.360 are located in multiple places such as
00:12:45.320 system or user environment variables
00:12:47.279 adabas configuration files and when you
00:12:49.120 run the adabas configure command you're
00:12:51.120 creating uh local configuration files or
00:12:53.839 explicitly declared on the command line
00:12:56.040 as a parameter so this is the order like
00:12:58.320 of precedent so if we were to use
00:13:00.320 command line options like profile which
00:13:02.399 is what I use every time I run a try
00:13:05.000 hackme profile that's number one that
00:13:06.959 will override any environment variables
00:13:08.920 you have set up or any configuration
00:13:10.600 files and then environment variables is
00:13:12.880 second in the precedent order so if you
00:13:15.120 have any environment variables set with
00:13:17.120 your ads credentials that's the second
00:13:19.399 thing the CLI will try to use so I will
00:13:22.120 link this this is a good resource um the
00:13:24.880 Precedence and okay but anyway on a tent
00:13:29.199 already can't help myself all right I
00:13:31.880 rearranged my tabs a little bit here so
00:13:33.839 let's go back over to cloudshell and
00:13:36.000 we're going to get the access key ID
00:13:38.720 from the access key that we just created
00:13:40.320 for Padawan and we can do um export dats
00:13:46.959 secret access I think I got the access
00:13:49.959 key ID let's
00:13:57.240 see yeah I got the ID so we can tell
00:13:59.600 that from
00:14:00.600 Akia so we'll do that and then we can do
00:14:03.839 export adus secret access key and this
00:14:08.759 will be the key itself and I'm sure
00:14:11.639 we're going to delete it at the end of
00:14:12.959 this lab hopefully all right so I keep
00:14:15.240 trying to use command V and I it doesn't
00:14:17.199 work on the attack box I wonder if
00:14:18.440 there's a way I can change that I bet
00:14:20.560 there is I'll try and figure that out
00:14:21.759 for you by the next walkthrough so you
00:14:22.880 don't have to watch me clunkily doing
00:14:24.839 that anyway so we're going to use these
00:14:26.920 environment variables so we got our
00:14:29.240 environment variable set up we hit enter
00:14:32.519 what is the character length of the
00:14:34.160 secret access key well oh my gosh I
00:14:37.560 certainly don't want to count it but I
00:14:41.120 bet I can copy it so I'm going to do
00:14:44.399 what I do in any situation like this and
00:14:46.440 I'm going to ask chat GPT to do this for
00:14:50.440 me so how many
00:14:53.839 characters is
00:14:57.680 this
00:15:00.440 and let's see what my best friend chat
00:15:02.079 gpts tells me today analyzing
00:15:07.680 analyzing for so this string is 40
00:15:10.320 characters thank you chat GPT and then
00:15:12.360 let's say is every AWS access key 40
00:15:19.079 characters in
00:15:23.360 link so it says yes they are all 40
00:15:26.399 characters in length but they're not
00:15:27.600 fixed in length at 40 characters all
00:15:29.199 right so that was maybe not a fruitful
00:15:31.839 um second question but the first
00:15:34.639 question This is 40 characters in length
00:15:36.480 let's see if that's
00:15:38.399 right and now you know come to think of
00:15:40.680 it there must be some sort of
00:15:41.720 consistency that with 40 characters in
00:15:43.560 length because otherwise how could try
00:15:45.720 hack me have this be the right answer to
00:15:47.759 the question because every access key is
00:15:49.720 going to be different all right anyway
00:15:51.480 that the point is you get the access key
00:15:53.199 and you figure out how long it is all
00:15:54.639 right so that was task four and then for
00:15:57.120 task five we are going to validate
00:15:58.560 valate our status on the attack box so
00:16:02.360 the SCS get caller identity command is
00:16:05.680 the ads equivalent of the Unix command
00:16:07.519 who am I and this is a great command to
00:16:09.079 have to memory I use this quite
00:16:10.560 frequently you should use it regularly
00:16:12.440 to make sure you know which account or
00:16:14.040 user role you're working with and this
00:16:15.560 is how you do it so we can do AWS STS
00:16:18.399 get callar
00:16:20.399 identity if I spell it right and this
00:16:22.639 should tell us uh The Entity the
00:16:25.240 principle we're authenticated with in
00:16:27.240 ads all right so awesome so we can see
00:16:29.680 we are authenticated with this user ID
00:16:32.399 and we can see the username here is
00:16:34.800 Padawan because that's always the last
00:16:36.279 part of the Arn so we are our caller
00:16:38.920 identity is the Padawan user says the
00:16:41.600 user ID you see here should match the
00:16:43.319 one from task two hold on to the account
00:16:46.240 ID returned above you will need it for
00:16:48.440 the next task when our Padawan user
00:16:50.560 assumes a new role with more permissions
00:16:53.519 hold on to the account ID above okay so
00:16:56.120 we'll just maybe not clear our output
00:16:58.120 and we can confirm um when we created
00:17:01.319 our Padawan user here was the Arn for
00:17:03.440 our new user so we can see that Arn
00:17:05.919 matches this perfect so we are the
00:17:07.799 Padawan
00:17:10.839 user and let's see now we are going to
00:17:14.480 assume the role of Jedi Master this is
00:17:16.880 like escalating so quickly now that you
00:17:18.880 use long-term access keys from an IM
00:17:20.919 user so that's what we were doing right
00:17:22.439 with the CLI we set those environment
00:17:24.280 variables using the long-term security
00:17:26.799 credential that authenticates us as the
00:17:28.760 IM IM user and now that we've used those
00:17:31.960 long-term access keys from an IM am user
00:17:33.880 we're going to generate short-term keys
00:17:36.160 for an I roll in many attack scenarios
00:17:38.880 you'll be leveraging these short-term
00:17:40.240 credentials so it's important to
00:17:42.120 understand the basics of this so the
00:17:44.120 next step we're going to assume the Jedi
00:17:46.200 Master role which is that role that was
00:17:48.480 already in our account when we got
00:17:50.480 started with this room we can open um
00:17:53.440 the I roles in the console and here's
00:17:56.320 the Jedi rooll let's see what it has
00:17:57.640 permission to do so it has um it doesn't
00:18:01.559 have any permissions okay so the Jedi
00:18:04.200 role doesn't have any permissions but
00:18:05.520 let's imagine it has like really high
00:18:07.280 stakes permissions just to make this
00:18:08.799 exciting for ourselves all right the
00:18:10.640 next step is to assume the role of Jedi
00:18:12.440 Master to do this we need three things
00:18:14.760 we need permission to assume the Jedi
00:18:16.840 role and this is provided by the policy
00:18:20.000 attached to the Padawan IM group so this
00:18:22.520 policy right here that Padawan is
00:18:24.960 inheriting from this group has the
00:18:27.640 permission we need to assume the Jedi
00:18:29.880 role and let's see what that looks
00:18:32.600 like so here is um Padawan but actually
00:18:35.919 we want to look at the group because
00:18:37.480 Padawan themselves does not permissions
00:18:40.799 so here's the group the Padawan group
00:18:43.520 and here's the permission that allows us
00:18:46.480 to assume the role and the only role
00:18:48.679 we're able to assume with this
00:18:50.080 permission is the Jedi rule um then
00:18:52.720 that's done with the resource block here
00:18:55.039 okay so the r the Amazon resource name
00:18:58.200 of the role we want to assume so we've
00:19:00.440 got that and then the RO session name
00:19:04.120 this string appears in cloud trail logs
00:19:06.000 we haven't talked a lot about cloud
00:19:07.159 trail in this learning path so far but I
00:19:08.840 think we're going to learn more about it
00:19:10.280 and help administrators distinguish who
00:19:12.679 or why a specific role was assumed so
00:19:15.159 for this we're going to use the name of
00:19:16.840 someone who almost became a Jedi master
00:19:19.360 this is going to be lore that goes way
00:19:20.960 over my head but we're going to use this
00:19:23.080 command so we're going to kind of build
00:19:25.080 the command piece by piece so we're
00:19:26.559 going to do AWS STS assume roll and then
00:19:29.960 we can do tac tac roll AR to say the
00:19:33.159 role we want to assume and I'm just
00:19:36.280 going to come over here to this Jedi
00:19:37.880 roll and grab the AR but you could also
00:19:41.159 build it yourself using um this logic
00:19:44.000 all you need as your account ID for the
00:19:45.919 tryck me sandbox and then what's next
00:19:50.159 roll AR and then that's the roll the
00:19:53.600 Jedi roll and then lastly we just need
00:19:55.559 the r session name and we're going to
00:19:57.480 name the roll session
00:20:00.039 Ahsoka
00:20:02.559 okay
00:20:04.159 perfect so I'm guessing aoka is a person
00:20:06.760 who almost became a deedi master now we
00:20:09.600 are going to take the output of the
00:20:11.440 assume rooll command so let's run the
00:20:13.880 command let's see if we got it
00:20:18.559 right this the suspense suspense is
00:20:22.039 building so
00:20:24.880 intensely did I not hit enter no I did
00:20:27.200 it's just slow
00:20:38.400 I think I
00:20:41.520 did okay so here's the return from that
00:20:44.600 command so here are the short-term
00:20:46.159 credentials we got and remember we can
00:20:47.960 tell right away these are short-term
00:20:49.520 credentials because we have the asiia
00:20:52.640 prefix for the access key ID and we have
00:20:54.799 an expiration because they're short-term
00:20:56.440 credentials so these are
00:20:59.039 the temporary security credentials STS
00:21:01.840 returns okay so now we are going to take
00:21:05.080 the output of this command and we're
00:21:07.840 going to set the three AWS CLI
00:21:10.039 environment variables required to use
00:21:12.159 temporary credentials for the rule so we
00:21:14.720 had set those environment variables for
00:21:16.360 these but now we're going to change the
00:21:17.720 environment variables to use these
00:21:19.279 temporary credentials and we probably
00:21:21.360 should have saved this like a I'm going
00:21:23.960 to do this again and I'm going
00:21:26.640 to um save I'm just going to do
00:21:31.279 cs.
00:21:33.960 txt oh my gosh sorry this is really
00:21:37.000 laggy for a minute here okay so since I
00:21:40.120 uh so since I directed the output of
00:21:42.720 this command to cs. text now I can just
00:21:45.919 do cat reds. text then I can have this
00:21:50.000 all here nice for me so the key so we're
00:21:52.600 going to do export AWS secret access
00:21:57.039 key
00:22:00.440 and that's going to be this value right
00:22:02.480 here secret access
00:22:06.600 key I just need this to be a little
00:22:09.240 longer I suppose maybe I control that
00:22:11.799 let's
00:22:15.799 see all right and then um we need the
00:22:18.960 access key
00:22:25.039 ID oh how do I make it shorter
00:22:28.760 okay so then we need the access key ID
00:22:30.760 that starts with the
00:22:37.880 Asia and then lastly we need the session
00:22:40.360 token for the session that we created
00:22:42.120 when we assumed the role with the
00:22:44.200 special name and everything and so let's
00:22:46.760 just get the whole session token with
00:22:49.200 the quotes and
00:22:51.360 everything and
00:22:53.480 paste okay so now our CLI should be
00:22:56.600 authenticated with the short term
00:22:58.400 credentials return from SCS how many
00:23:01.200 minutes are your session credentials
00:23:02.960 good for okay so we have the
00:23:07.880 expiration okay and okay so we have the
00:23:11.440 expiration and I think oh my God I'm so
00:23:14.120 bad at this I'm gonna ask chat GPT how
00:23:17.600 far in the future is this
00:23:19.679 haa in Mountain Standard Time when would
00:23:24.840 this token
00:23:26.880 expire
00:23:30.039 if this is the
00:23:38.120 expiration and let's see what it's got
00:23:40.360 for
00:23:44.000 me at
00:23:46.919 16647 okay so um that would be 416 and I
00:23:51.360 bet I created that around 3:16 now you
00:23:53.240 know it's the afternoon for me so use
00:23:55.720 that information as you will but
00:23:58.600 um anyway so what I just did there so
00:24:01.120 this is a ISO 8601 timestamp so you
00:24:04.440 could use a converter or I just asked
00:24:05.960 chat GPT to convert it for me and the
00:24:09.120 expiration it looks like the session was
00:24:11.120 good for 60s all right so there we go
00:24:13.600 and then how many ads CLI environment
00:24:15.720 variables did we have to set so we set
00:24:17.440 three the access key the access key ID I
00:24:20.360 guess that was right here oh yeah the so
00:24:22.400 we set three the access key the access
00:24:24.360 key ID and the session token so that's
00:24:26.320 three environment variables
00:24:28.399 and then for task seven we are going to
00:24:31.360 validate our newly found powers so let's
00:24:33.520 see what's going on now that we
00:24:35.399 configure the ads CLI environment with
00:24:37.760 your new credentials verify you're
00:24:39.880 acting as the Jedi role and we can do
00:24:42.120 that we learned how to do that before
00:24:43.960 right so um we can just once again run
00:24:48.200 awss get caller identity and instead of
00:24:52.600 being the user which we were before we
00:24:55.000 should now be the assumed role so before
00:24:57.760 before I think I cleared the output but
00:24:59.440 before when we ran AWS STS get C
00:25:01.679 identity we were uh returned the user
00:25:04.880 right the RN for the Jedi user but now
00:25:07.480 that we're using those short-term
00:25:08.640 credentials we're using the assumed role
00:25:11.120 Ahsoka and so if Ahsoka had different
00:25:13.039 permissions that rule had different
00:25:14.320 permissions associated with it we would
00:25:16.000 be able to use those permissions to run
00:25:18.120 commands so what I am resourced is the
00:25:20.960 string that begins with a o a represent
00:25:23.840 so that represents an IM rooll and IM
00:25:26.080 rooll IDs are always going to start with
00:25:28.520 a r o a so when we see that we know it's
00:25:31.559 a a role okay and that is the end of the
00:25:36.039 SCS credentials lab that was a great
00:25:37.480 room I really like that and Illustrated
00:25:39.039 a lot of good things about IM
00:25:40.360 credentials and was good practice for me
00:25:42.640 too if anything else be just remember
00:25:44.039 SCS get col identity that's really
00:25:45.600 useful so with that being said we're
00:25:46.880 getting into the fun stuff now because
00:25:48.240 we're really like starting to apply the
00:25:50.039 knowledge we're doing some actual kind
00:25:51.480 of like hacking stuff and the next room
00:25:53.679 up we're going to progress to the
00:25:55.720 attacking and defending aw Services
00:25:58.559 module and the first room is going to be
00:26:00.720 attack and defense for AWS S3 which is
00:26:02.840 storage buckets I'm sure that would be
00:26:04.480 very fun I work with S3 quite a lot so
00:26:06.320 hopefully I'll hold up okay thank you so
00:26:08.440 much for watching this walkthrough and I
00:26:10.440 will see you next time
